# go-musicfox v2 插件构建流水线
# 专门用于插件开发、测试和发布的CI/CD流水线

name: Plugin Build

on:
  push:
    branches: [ main, develop, 'feature/*', 'plugin/*' ]
    paths:
      - 'v2/plugins/**'
      - 'v2/pkg/plugin/**'
      - 'v2/internal/plugin/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'v2/plugins/**'
      - 'v2/pkg/plugin/**'
      - 'v2/internal/plugin/**'
  workflow_dispatch:
    inputs:
      plugin_type:
        description: '插件类型'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - shared
          - rpc
          - wasm
          - hotload
      build_mode:
        description: '构建模式'
        required: true
        default: 'release'
        type: choice
        options:
          - debug
          - release
          - test
      platforms:
        description: '目标平台 (逗号分隔)'
        required: false
        default: 'linux,darwin,windows'
        type: string

env:
  GO_VERSION: '1.21'
  TINYGO_VERSION: '0.30.0'
  WASM_PACK_VERSION: '0.12.1'

jobs:
  # 插件代码质量检查
  plugin-quality:
    name: 插件代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置Go环境
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libportaudio2 \
            libportaudio-dev \
            libflac-dev \
            libtag1-dev

      - name: 下载Go依赖
        working-directory: ./v2
        run: go mod download

      - name: 检查插件接口兼容性
        working-directory: ./v2
        run: |
          echo "检查插件接口兼容性..."
          go run ./tools/plugin-interface-check.go

      - name: 插件代码格式检查
        working-directory: ./v2
        run: |
          echo "检查插件代码格式..."
          plugin_files=$(find plugins/ -name "*.go" | head -20)
          if [ -n "$plugin_files" ]; then
            if [ "$(gofmt -s -l $plugin_files | wc -l)" -gt 0 ]; then
              echo "插件代码格式不符合规范:"
              gofmt -s -l $plugin_files
              exit 1
            fi
          fi

      - name: 插件静态分析
        working-directory: ./v2
        run: |
          echo "运行插件静态分析..."
          go vet ./plugins/...

      - name: 插件依赖检查
        working-directory: ./v2
        run: |
          echo "检查插件依赖..."
          ./tools/plugin-dependency-check.sh

  # 动态链接库插件构建
  build-shared-plugins:
    name: 构建动态链接库插件
    runs-on: ${{ matrix.os }}
    needs: plugin-quality
    if: ${{ github.event.inputs.plugin_type == 'all' || github.event.inputs.plugin_type == 'shared' || github.event.inputs.plugin_type == '' }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Go环境
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 安装构建依赖
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            libasound2-dev \
            libportaudio2 \
            libportaudio-dev \
            libflac-dev \
            libtag1-dev

      - name: 安装macOS依赖
        if: matrix.os == 'macos-latest'
        run: |
          brew install portaudio flac taglib

      - name: 构建动态链接库插件
        working-directory: ./v2
        run: |
          export GOOS=${{ matrix.goos }}
          export GOARCH=${{ matrix.goarch }}
          export CGO_ENABLED=1
          
          if [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
          fi
          
          if [ "${{ matrix.goos }}" = "windows" ]; then
            export CGO_ENABLED=0
            echo "Windows暂不支持动态链接库插件"
            exit 0
          fi
          
          # 构建所有动态链接库插件
          make build-shared-plugins BUILDMODE=${{ github.event.inputs.build_mode || 'release' }}
        shell: bash

      - name: 测试动态链接库插件
        working-directory: ./v2
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        run: |
          # 测试插件加载
          ./tools/plugin-validator.sh build/plugins/shared/

      - name: 上传动态链接库插件
        uses: actions/upload-artifact@v3
        with:
          name: shared-plugins-${{ matrix.goos }}-${{ matrix.goarch }}
          path: v2/build/plugins/shared/
          retention-days: 30

  # RPC插件构建
  build-rpc-plugins:
    name: 构建RPC插件
    runs-on: ${{ matrix.os }}
    needs: plugin-quality
    if: ${{ github.event.inputs.plugin_type == 'all' || github.event.inputs.plugin_type == 'rpc' || github.event.inputs.plugin_type == '' }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: windows-latest
            goos: windows
            goarch: amd64
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Go环境
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 安装依赖
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libportaudio2 \
            libportaudio-dev \
            libflac-dev \
            libtag1-dev

      - name: 安装macOS依赖
        if: matrix.os == 'macos-latest'
        run: |
          brew install portaudio flac taglib

      - name: 构建RPC插件
        working-directory: ./v2
        run: |
          export GOOS=${{ matrix.goos }}
          export GOARCH=${{ matrix.goarch }}
          
          if [ "${{ matrix.goos }}" = "windows" ]; then
            export CGO_ENABLED=0
          else
            export CGO_ENABLED=1
          fi
          
          # 构建所有RPC插件
          make build-rpc-plugins BUILDMODE=${{ github.event.inputs.build_mode || 'release' }}
        shell: bash

      - name: 测试RPC插件
        working-directory: ./v2
        run: |
          # 启动RPC插件服务器进行测试
          ./tools/test-rpc-plugins.sh
        shell: bash

      - name: 上传RPC插件
        uses: actions/upload-artifact@v3
        with:
          name: rpc-plugins-${{ matrix.goos }}-${{ matrix.goarch }}
          path: v2/build/plugins/rpc/
          retention-days: 30

  # WebAssembly插件构建
  build-wasm-plugins:
    name: 构建WebAssembly插件
    runs-on: ubuntu-latest
    needs: plugin-quality
    if: ${{ github.event.inputs.plugin_type == 'all' || github.event.inputs.plugin_type == 'wasm' || github.event.inputs.plugin_type == '' }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Go环境
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 安装TinyGo
        run: |
          wget https://github.com/tinygo-org/tinygo/releases/download/v${{ env.TINYGO_VERSION }}/tinygo_${{ env.TINYGO_VERSION }}_amd64.deb
          sudo dpkg -i tinygo_${{ env.TINYGO_VERSION }}_amd64.deb || true
          sudo apt-get install -f

      - name: 安装wasm-pack
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: 验证WebAssembly工具链
        run: |
          tinygo version
          wasm-pack --version

      - name: 构建WebAssembly插件
        working-directory: ./v2
        run: |
          # 构建Go WebAssembly插件
          make build-wasm-plugins BUILDMODE=${{ github.event.inputs.build_mode || 'release' }}
          
          # 构建Rust WebAssembly插件（如果存在）
          if [ -d "plugins/wasm/rust" ]; then
            cd plugins/wasm/rust
            for plugin_dir in */; do
              if [ -f "$plugin_dir/Cargo.toml" ]; then
                echo "构建Rust WASM插件: $plugin_dir"
                cd "$plugin_dir"
                wasm-pack build --target web --out-dir ../../../../build/plugins/wasm/
                cd ..
              fi
            done
          fi

      - name: 优化WebAssembly文件
        run: |
          # 安装wasm-opt
          sudo apt-get install -y binaryen
          
          # 优化WASM文件
          find v2/build/plugins/wasm/ -name "*.wasm" -exec wasm-opt -Oz {} -o {} \;

      - name: 测试WebAssembly插件
        working-directory: ./v2
        run: |
          # 测试WASM插件加载
          ./tools/test-wasm-plugins.sh

      - name: 生成WebAssembly插件清单
        working-directory: ./v2
        run: |
          ./tools/generate-wasm-manifest.sh build/plugins/wasm/

      - name: 上传WebAssembly插件
        uses: actions/upload-artifact@v3
        with:
          name: wasm-plugins
          path: v2/build/plugins/wasm/
          retention-days: 30

  # 热加载插件构建
  build-hotload-plugins:
    name: 构建热加载插件
    runs-on: ${{ matrix.os }}
    needs: plugin-quality
    if: ${{ github.event.inputs.plugin_type == 'all' || github.event.inputs.plugin_type == 'hotload' || github.event.inputs.plugin_type == '' }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: windows-latest
            goos: windows
            goarch: amd64
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Go环境
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 安装依赖
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libportaudio2 \
            libportaudio-dev \
            libflac-dev \
            libtag1-dev

      - name: 安装macOS依赖
        if: matrix.os == 'macos-latest'
        run: |
          brew install portaudio flac taglib

      - name: 构建热加载插件
        working-directory: ./v2
        run: |
          export GOOS=${{ matrix.goos }}
          export GOARCH=${{ matrix.goarch }}
          
          if [ "${{ matrix.goos }}" = "windows" ]; then
            export CGO_ENABLED=0
          else
            export CGO_ENABLED=1
          fi
          
          # 构建热加载插件
          make build-hotload-plugins BUILDMODE=${{ github.event.inputs.build_mode || 'release' }}
        shell: bash

      - name: 测试热加载功能
        working-directory: ./v2
        if: matrix.goos == 'linux'
        run: |
          # 测试热加载功能
          ./tools/test-hotload-plugins.sh

      - name: 上传热加载插件
        uses: actions/upload-artifact@v3
        with:
          name: hotload-plugins-${{ matrix.goos }}-${{ matrix.goarch }}
          path: v2/build/plugins/hotload/
          retention-days: 30

  # 插件集成测试
  plugin-integration-test:
    name: 插件集成测试
    runs-on: ubuntu-latest
    needs: [build-shared-plugins, build-rpc-plugins, build-wasm-plugins, build-hotload-plugins]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Go环境
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libportaudio2 \
            libportaudio-dev \
            libflac-dev \
            libtag1-dev

      - name: 下载所有插件产物
        uses: actions/download-artifact@v3
        with:
          path: plugin-artifacts

      - name: 整理插件文件
        run: |
          mkdir -p v2/build/plugins
          
          # 复制所有插件到统一目录
          find plugin-artifacts -type f -exec cp {} v2/build/plugins/ \; || true
          
          # 按类型组织插件
          mkdir -p v2/build/plugins/{shared,rpc,wasm,hotload}
          
          # 移动插件到对应目录
          find v2/build/plugins -name "*.so" -exec mv {} v2/build/plugins/shared/ \; || true
          find v2/build/plugins -name "*rpc*" -exec mv {} v2/build/plugins/rpc/ \; || true
          find v2/build/plugins -name "*.wasm" -exec mv {} v2/build/plugins/wasm/ \; || true
          find v2/build/plugins -name "*hotload*" -exec mv {} v2/build/plugins/hotload/ \; || true
          
          echo "插件文件结构:"
          find v2/build/plugins -type f | head -20

      - name: 构建微内核
        working-directory: ./v2
        run: |
          make build-core
          chmod +x build/go-musicfox-linux-amd64

      - name: 运行插件集成测试
        working-directory: ./v2
        env:
          MUSICFOX_REDIS_URL: redis://localhost:6379
          MUSICFOX_ENV: test
        run: |
          # 启动应用
          ./build/go-musicfox-linux-amd64 --daemon --plugin-dir=build/plugins &
          APP_PID=$!
          
          # 等待应用启动
          sleep 10
          
          # 运行插件集成测试
          go test -v -tags=plugin_integration ./test/plugin_integration/... -timeout=10m
          
          # 清理
          kill $APP_PID || true

      - name: 生成插件兼容性报告
        working-directory: ./v2
        run: |
          ./tools/generate-plugin-compatibility-report.sh build/plugins/ > plugin-compatibility-report.txt

      - name: 上传集成测试报告
        uses: actions/upload-artifact@v3
        with:
          name: plugin-integration-test-report
          path: |
            v2/plugin-compatibility-report.txt
            v2/logs/
          retention-days: 30

  # 插件性能测试
  plugin-performance-test:
    name: 插件性能测试
    runs-on: ubuntu-latest
    needs: [build-shared-plugins, build-rpc-plugins, build-wasm-plugins, build-hotload-plugins]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Go环境
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 下载插件产物
        uses: actions/download-artifact@v3
        with:
          name: shared-plugins-linux-amd64
          path: v2/build/plugins/shared/

      - name: 运行插件性能测试
        working-directory: ./v2
        run: |
          # 插件加载性能测试
          go test -bench=BenchmarkPluginLoad -benchmem ./plugins/...
          
          # 插件执行性能测试
          go test -bench=BenchmarkPluginExecution -benchmem ./plugins/...
          
          # 插件内存使用测试
          go test -bench=BenchmarkPluginMemory -benchmem ./plugins/...

      - name: 上传性能测试报告
        uses: actions/upload-artifact@v3
        with:
          name: plugin-performance-report
          path: v2/plugin-benchmark-results.txt
          retention-days: 30

  # 插件文档生成
  generate-plugin-docs:
    name: 生成插件文档
    runs-on: ubuntu-latest
    needs: [build-shared-plugins, build-rpc-plugins, build-wasm-plugins, build-hotload-plugins]
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Go环境
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 下载插件产物
        uses: actions/download-artifact@v3
        with:
          path: plugin-artifacts

      - name: 生成插件API文档
        working-directory: ./v2
        run: |
          # 生成插件接口文档
          go run ./tools/generate-plugin-docs.go
          
          # 生成插件示例
          ./tools/generate-plugin-examples.sh

      - name: 生成插件清单
        working-directory: ./v2
        run: |
          ./tools/generate-plugin-manifest.sh plugin-artifacts/ > plugin-manifest.json

      - name: 上传插件文档
        uses: actions/upload-artifact@v3
        with:
          name: plugin-documentation
          path: |
            v2/docs/plugins/
            v2/plugin-manifest.json
          retention-days: 30

  # 插件构建状态汇总
  plugin-build-summary:
    name: 插件构建状态汇总
    runs-on: ubuntu-latest
    needs: [plugin-quality, build-shared-plugins, build-rpc-plugins, build-wasm-plugins, build-hotload-plugins, plugin-integration-test]
    if: always()
    
    steps:
      - name: 汇总构建结果
        run: |
          echo "# go-musicfox v2 插件构建结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 构建状态" >> $GITHUB_STEP_SUMMARY
          echo "| 插件类型 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 代码质量检查 | ${{ needs.plugin-quality.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 动态链接库插件 | ${{ needs.build-shared-plugins.result == 'success' && '✅ 成功' || needs.build-shared-plugins.result == 'skipped' && '⏭️ 跳过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| RPC插件 | ${{ needs.build-rpc-plugins.result == 'success' && '✅ 成功' || needs.build-rpc-plugins.result == 'skipped' && '⏭️ 跳过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| WebAssembly插件 | ${{ needs.build-wasm-plugins.result == 'success' && '✅ 成功' || needs.build-wasm-plugins.result == 'skipped' && '⏭️ 跳过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 热加载插件 | ${{ needs.build-hotload-plugins.result == 'success' && '✅ 成功' || needs.build-hotload-plugins.result == 'skipped' && '⏭️ 跳过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 集成测试 | ${{ needs.plugin-integration-test.result == 'success' && '✅ 通过' || needs.plugin-integration-test.result == 'skipped' && '⏭️ 跳过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 总体状态" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.plugin-quality.result }}" == "success" ]]; then
            echo "✅ **插件构建成功！所有插件类型都已成功构建和测试。**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **插件构建失败！请检查失败的构建并修复问题。**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi